import gql from '../src';
import loader from '../loader';

describe('gql', () => {
  it('parses queries', () => {
    expect(gql`{ testQuery }`.kind).toEqual('Document');
  });

  it('parses queries when called as a function', () => {
    expect((gql('{ testQuery }').kind)).toEqual('Document');
  });

  it('parses queries with weird substitutions', () => {
    const obj = {};
    expect(gql`{ field(input: "${(obj as any).missing}") }`.kind).toEqual('Document');
    expect(gql`{ field(input: "${null}") }`.kind).toEqual('Document');
    expect(gql`{ field(input: "${0}") }`.kind).toEqual('Document');
  });

  it('allows interpolation of documents generated by the webpack loader', () => {
    const sameFragment = "fragment SomeFragmentName on SomeType { someField }";

    const jsSource = loader.call(
      /* tslint:disable-next-line */
      { cacheable() {} },
      "fragment SomeFragmentName on SomeType { someField }"
    );
    const module = { exports: undefined };
    /* tslint:disable-next-line */
    eval(jsSource);

    const document = gql`query { ...SomeFragmentName } ${module.exports}`;
    expect(document.kind).toEqual('Document');
    expect(document.definitions.length).toEqual(2);
    expect(document.definitions[0].kind).toEqual('OperationDefinition');
    expect(document.definitions[1].kind).toEqual('FragmentDefinition');
  });
});
